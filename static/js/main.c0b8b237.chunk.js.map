{"version":3,"sources":["components/MonsterImages/MonsterImages.js","components/Wrapper/Wrapper.js","components/NavBar/NavBar.js","components/Header/Header.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["MonsterImages","props","react_default","a","createElement","className","aria-label","onClick","score","id","alt","src","image","Wrapper","children","NavBar","href","message","indexOf","concat","topScore","Header","Footer","App","state","monsters","clickedMonsters","unselectedMonsters","shuffleArray","array","i","length","j","Math","floor","random","_ref","handleIncrement","console","log","_this","includes","setState","Object","toConsumableArray","_this2","this","NavBar_NavBar","Header_Header","Wrapper_Wrapper","map","monster","MonsterImages_MonsterImages","key","value","Footer_Footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0b8b237.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction MonsterImages(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img aria-label=\"clickItem\" className=\"clickItem\" onClick={()=>props.score(props.id)} alt=\"monster\" src={props.image} />\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default MonsterImages;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-1\"></div>\r\n      <div className=\"col-10\">\r\n        <div className=\"wrapper\">{props.children}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction NavBar(props) {\r\n  return (\r\n    <nav className=\"navbar sticky-top navbar-light\">\r\n      <div className=\"container-fluid\">\r\n        <div className=\"navbar-header\">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            <img id=\"headerMonster\" alt=\"navigationMonster\" src=\"https://cdn.dribbble.com/users/149122/screenshots/2711052/icon.png\" />\r\n          </a>\r\n        </div>\r\n          <ul className=\"nav list-inline h4\">\r\n            <li id=\"message\" className={props.message.indexOf('incorrectly') !== -1 ?\r\n                \"desc-incorrect\" : props.message.indexOf('correctly') !== -1 ?\r\n                \"desc-correct\" : \"desc-normal\"} >\r\n              {props.message}\r\n            </li>\r\n            <li className=\"scores\">\r\n              {`Score: ${props.score}  |  Top Score: ${props.topScore}`}\r\n            </li>\r\n          </ul>\r\n      </div>\r\n    </nav>\r\n  \r\n  );\r\n};\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container-fluid\">\r\n            <h1 className=\"display-4\">Click a Monster!</h1>\r\n            <p className=\"lead\">To play, click a monster to earn points, but don't click on any monster more than once. Good luck!</p>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n\r\n\r\n","import React from \"react\";\r\n\r\n\r\nfunction Footer(props) {\r\n  return (\r\n    <footer className=\"page-footer font-small grey\">\r\n        <div className=\"footer-copyright text-center py-3\">Â© 2019 Copyright:\r\n        <a href=\"http://meghansmorris.com\"> Meghan Morris</a>\r\n        </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n\r\n\r\n","import React from \"react\";\nimport MonsterImage from \"./components/MonsterImages/MonsterImages\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport monsters from \"./monsters.json\";\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport Header from \"./components/Header/Header\";\nimport Footer from \"./components/Footer/Footer\";\n \n    // when the monster is clicked, check that it hasn't already been clicked\n    //if it has been clicked, game over, update top score and automatic restart of the game\n    //if it hasn't been clicked, add its value to the total and shuffle the monsters\n\nclass App extends React.Component {\n  state = {\n    monsters: monsters,\n    clickedMonsters: [],\n    topScore: 0,\n    score: 0,\n    message: \"Click a monster to begin\",\n    unselectedMonsters: monsters\n  };\n\n  componentDidMount() {\n    \n  }\n\n  shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  handleIncrement = (id) => {\n    console.log(\"inside handleincrement\")\n    console.log(id);\n\n    if(this.state.clickedMonsters.includes(id)) {\n      this.setState({\n        message: \"Click a monster to begin\",\n        topScore: (this.state.score > this.state.topScore) ? this.state.score : this.state.topScore,\n        score: 0,\n        monsters: monsters,\n        unselectedMonsters: monsters,\n        clickedMonsters: []\n      })\n    } else {\n      console.log(\"add point\")\n      //doesn't mutate original array and allows you to add on to the array\n      this.setState({ clickedMonsters: [...this.state.clickedMonsters, id] });\n      this.setState({ \n        message: \"Yay!\",\n        score: this.state.score + 1,\n        monsters: monsters,\n        unselectedMonsters: monsters \n      });\n      console.log(this.state.clickedMonsters);\n      console.log(this.state.score);\n    };\n    this.shuffleArray(monsters);\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar message={this.state.message} score={this.state.score} topScore={this.state.topScore}/>\n        <Header />\n          {/* <div class=\"alert alert-info alert-dismissible\" display=\"block\">\n            <a class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">&times;</a>\n            <strong>Game over!</strong> Try again?\n          </div> */}\n        <Wrapper>\n              {\n                this.state.monsters.map(monster=> (\n                  <MonsterImage\n                  image={monster.image}\n                  id={monster.id}\n                  key={monster.id}\n                  value={monster.value}\n                  score={this.handleIncrement}\n                  \n                  />\n                ))\n              }\n        </Wrapper>\n        <Footer />\n      </div>\n      )\n  };\n};\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}